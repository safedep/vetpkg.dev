"use client";

import { Badge } from "@/components/ui/badge";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
} from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { QueryPackageAnalysisResponse } from "@buf/safedep_api.bufbuild_es/safedep/services/malysis/v1/malysis_pb";
import { ChevronDown, ExternalLink } from "lucide-react";
import Link from "next/link";
import ReactMarkdown from "react-markdown";
import { getConfidenceName } from "./utils";
import { MalwareStatus, MalwareEvidence } from "./types";
import { Report_Evidence_Confidence } from "@buf/safedep_api.bufbuild_es/safedep/messages/malysis/v1/report_pb";

interface MalwareAnalysisProps {
  malwareAnalysis: QueryPackageAnalysisResponse | null;
  malwareAnalysisStatus: MalwareStatus;
  malwareEvidences: MalwareEvidence[];
}

export default function MalwareAnalysis({
  malwareAnalysis,
  malwareAnalysisStatus,
  malwareEvidences,
}: MalwareAnalysisProps) {
  return (
    <Card>
      <CardHeader>
        <CardDescription>
          <p className="text-sm text-muted-foreground justify-left flex items-center gap-1 bg-slate-100 p-2 rounded-md">
            Malicious code scanning is performed using
            <a
              href="https://docs.safedep.io/cloud/malware-analysis"
              className="text-blue-500 hover:underline flex items-center gap-1"
              target="_blank"
              rel="noopener noreferrer"
            >
              <ExternalLink className="h-4 w-4" /> SafeDep Malicious Package
              Scanning API
            </a>
          </p>
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Status Summary */}
        <div className="rounded-lg border p-4">
          <div className="flex items-center gap-2 mb-4">
            <span
              className={`text-lg font-semibold ${
                malwareAnalysisStatus === MalwareStatus.Malicious
                  ? "text-red-600"
                  : malwareAnalysisStatus === MalwareStatus.PossiblyMalicious
                    ? "text-orange-600"
                    : malwareAnalysisStatus === MalwareStatus.Unknown
                      ? "text-gray-600"
                      : "text-green-600"
              }`}
            >
              {malwareAnalysisStatus === MalwareStatus.Malicious
                ? "⚠️ Malware Detected"
                : malwareAnalysisStatus === MalwareStatus.PossiblyMalicious
                  ? "⚠️ Possibly Malicious"
                  : malwareAnalysisStatus === MalwareStatus.Unknown
                    ? "❓ Unknown"
                    : "✅ Clean Package"}
            </span>
            {malwareAnalysis?.verificationRecord && (
              <Badge variant="outline" className="bg-blue-100 text-blue-800">
                Verified
              </Badge>
            )}
          </div>
          {/* Show verification record if it exists */}
          {malwareAnalysis?.verificationRecord && (
            <div className="space-y-2 border rounded-md p-4 mb-3 bg-slate-50">
              <p className="font-medium leading-2">Verification Record</p>
              <div className="space-y-4">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">
                    Reason
                  </p>
                  <ReactMarkdown className="text-sm text-muted-foreground">
                    {malwareAnalysis?.verificationRecord.reason}
                  </ReactMarkdown>
                </div>
                <div>
                  <p className="text-sm font-medium text-muted-foreground">
                    Extra Analysis
                  </p>
                  <ReactMarkdown className="text-sm text-muted-foreground">
                    {malwareAnalysis?.verificationRecord.extraAnalysis}
                  </ReactMarkdown>
                </div>
              </div>
            </div>
          )}
          {/* Summary */}
          <div className="space-y-2">
            {malwareAnalysis?.report?.inference?.summary && (
              <>
                <p className="font-medium leading-2">Reason</p>
                <p className="text-sm text-muted-foreground">
                  <ReactMarkdown>
                    {malwareAnalysis?.report?.inference?.summary}
                  </ReactMarkdown>
                </p>
              </>
            )}
            {malwareAnalysis?.report?.inference?.details && (
              <>
                <p className="font-medium mt-4 leading-2">Details</p>
                <div className="text-sm text-muted-foreground prose prose-sm max-w-none">
                  <ReactMarkdown>
                    {malwareAnalysis?.report?.inference?.details}
                  </ReactMarkdown>
                </div>
              </>
            )}
          </div>
        </div>

        {/* Evidence Table */}
        <div>
          <h3 className="text-lg font-semibold mb-4">Analysis Evidence</h3>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Source</TableHead>
                <TableHead>File Name</TableHead>
                <TableHead>Confidence</TableHead>
                <TableHead>Description</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {malwareEvidences.map((evidence, index) => (
                <>
                  <TableRow key={index}>
                    <TableCell className="font-medium">
                      {evidence.source}
                    </TableCell>
                    <TableCell className="text-sm">
                      {evidence.fileKey}
                    </TableCell>
                    <TableCell>
                      <Badge
                        variant="outline"
                        className={`
                          ${
                            evidence.confidence ===
                            Report_Evidence_Confidence.HIGH
                              ? "bg-red-100 text-red-800"
                              : evidence.confidence ===
                                  Report_Evidence_Confidence.MEDIUM
                                ? "bg-yellow-100 text-yellow-800"
                                : "bg-blue-100 text-blue-800"
                          }`}
                      >
                        {getConfidenceName(evidence.confidence)}
                      </Badge>
                    </TableCell>
                    <TableCell className="max-w-xl">
                      <Link
                        href="#"
                        className="hover:underline"
                        onClick={() => {
                          const allEvidenceDetails = document.querySelectorAll(
                            ".hidden-evidence-details",
                          );
                          allEvidenceDetails.forEach((evidenceDetails) => {
                            evidenceDetails.classList.add("hidden");
                          });

                          const evidenceDetails = document.getElementById(
                            `evidence-${index}`,
                          );
                          if (evidenceDetails) {
                            evidenceDetails.classList.toggle("hidden");
                          }
                        }}
                      >
                        <div className="flex items-center gap-2">
                          {evidence.title} <ChevronDown className="w-4 h-4" />
                        </div>
                      </Link>
                    </TableCell>
                  </TableRow>
                  <TableRow
                    className="bg-slate-50 hidden hidden-evidence-details"
                    id={`evidence-${index}`}
                  >
                    <TableCell colSpan={4}>
                      <ReactMarkdown>{evidence.details}</ReactMarkdown>
                    </TableCell>
                  </TableRow>
                </>
              ))}
            </TableBody>
          </Table>
        </div>
      </CardContent>
    </Card>
  );
}

export { MalwareStatus };
