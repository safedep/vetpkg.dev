import { render, screen, fireEvent } from "@testing-library/react";
import MalwareAnalysis from "./MalwareAnalysis";
import { MalwareStatus } from "./types";
import { Report_Evidence_Confidence } from "@buf/safedep_api.bufbuild_es/safedep/messages/malysis/v1/report_pb";
import { describe, it, expect } from "vitest";
import "@testing-library/jest-dom";
import { QueryPackageAnalysisResponse } from "@buf/safedep_api.bufbuild_es/safedep/services/malysis/v1/malysis_pb";

describe("MalwareAnalysis", () => {
  const mockMalwareEvidences = [
    {
      source: "Test Source",
      fileKey: "test.js",
      confidence: Report_Evidence_Confidence.HIGH,
      title: "Suspicious Code",
      details: "Detailed explanation of the suspicious code",
    },
  ];

  const mockVerificationRecord = {
    reason: "Manual verification by security team",
    extraAnalysis: "Additional security analysis performed",
  };

  const mockMalwareAnalysis: QueryPackageAnalysisResponse = {
    verificationRecord: mockVerificationRecord,
    report: {
      inference: {
        summary: "Package contains suspicious code",
        details: "Detailed analysis of suspicious behavior",
      },
    },
  } as QueryPackageAnalysisResponse;

  it("renders basic component structure", () => {
    render(
      <MalwareAnalysis
        malwareAnalysis={null}
        malwareAnalysisStatus={MalwareStatus.Safe}
        malwareEvidences={[]}
      />,
    );

    expect(screen.getByText(/Malicious code scanning/i)).toBeInTheDocument();
    expect(screen.getByText("Analysis Evidence")).toBeInTheDocument();
  });

  it("displays correct status for malicious package", () => {
    render(
      <MalwareAnalysis
        malwareAnalysis={null}
        malwareAnalysisStatus={MalwareStatus.Malicious}
        malwareEvidences={[]}
      />,
    );

    expect(screen.getByText("⚠️ Malware Detected")).toBeInTheDocument();
  });

  it("displays correct status for possibly malicious package", () => {
    render(
      <MalwareAnalysis
        malwareAnalysis={null}
        malwareAnalysisStatus={MalwareStatus.PossiblyMalicious}
        malwareEvidences={[]}
      />,
    );

    expect(screen.getByText("⚠️ Possibly Malicious")).toBeInTheDocument();
  });

  it("displays verification record when present", () => {
    render(
      <MalwareAnalysis
        malwareAnalysis={mockMalwareAnalysis}
        malwareAnalysisStatus={MalwareStatus.Malicious}
        malwareEvidences={[]}
      />,
    );

    expect(screen.getByText("Verified")).toBeInTheDocument();
    expect(
      screen.getByText("Manual verification by security team"),
    ).toBeInTheDocument();
    expect(
      screen.getByText("Additional security analysis performed"),
    ).toBeInTheDocument();
  });

  it("displays malware evidences in table", () => {
    render(
      <MalwareAnalysis
        malwareAnalysis={null}
        malwareAnalysisStatus={MalwareStatus.Malicious}
        malwareEvidences={mockMalwareEvidences}
      />,
    );

    expect(screen.getByText("Test Source")).toBeInTheDocument();
    expect(screen.getByText("test.js")).toBeInTheDocument();
    expect(screen.getByText("Suspicious Code")).toBeInTheDocument();
  });

  it("displays inference summary and details when available", () => {
    render(
      <MalwareAnalysis
        malwareAnalysis={mockMalwareAnalysis}
        malwareAnalysisStatus={MalwareStatus.Malicious}
        malwareEvidences={[]}
      />,
    );

    expect(
      screen.getByText("Package contains suspicious code"),
    ).toBeInTheDocument();
    expect(
      screen.getByText("Detailed analysis of suspicious behavior"),
    ).toBeInTheDocument();
  });
});
